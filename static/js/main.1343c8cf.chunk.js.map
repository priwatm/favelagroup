{"version":3,"sources":["components/pages/ForgetPassword/components/types/index.ts","components/markup/Header/index.tsx","constants/routes.tsx","assets/img/logo.svg","constants/security.ts","constants/empty.ts","domain/managers/application-manager.ts","stores/security-store.ts","stores/content-store.ts","context/application-context.tsx","domain/managers/mobx-manager.ts","hooks/manager/useApplicationManager.ts","components/menu/HeaderMenu/index.tsx","components/UI/ButtonSocial/index.tsx","components/pages/Auth/index.tsx","components/pages/ForgetPassword/components/ForgetPassword/index.tsx","components/pages/Registration/components/types/index.ts","components/pages/ForgetPassword/components/EmailSent/index.tsx","components/pages/ForgetPassword/index.tsx","constants/test.ts","components/pages/Registration/index.tsx","components/pages/Registration/components/EmailConfirmed/index.tsx","components/pages/Registration/components/RepeatedConfirmed/index.tsx","components/pages/Registration/components/index.tsx","containers/MainContainer/index.tsx","index.tsx"],"names":["ForgetState","Header","children","routes","title","path","confirmed","anonymous","isUser","emptyVisible","visible","ApplicationManager","stateManager","stateContent","this","securityStore","setUser","contentStore","setVisibleHeader","error","user","visibleHeader","visibleContent","SecurityStore","makeObservable","observable","action","ContentStore","applicationManager","ApplicationContext","React","createContext","useApplicationManager","useContext","HeaderMenu","observer","history","useHistory","location","useLocation","useEffect","pathname","content","onClick","push","className","to","src","logo","alt","ButtonSocial","icon","text","Auth","useState","email","password","state","setState","setError","type","value","name","placeholder","onChange","e","currentTarget","ConfirmedState","ForgetPass","onControl","RegExp","test","EmailSent","onSubmit","ForgetSend","ForgetPassword","component","setComponent","setIcon","online","Registration","setVisible","onLogOn","handleSubmit","a","hidden","Confirmed","RepeatedEmailConfirmed","href","EmailConfirmed","RepeatedConfirmed","MainContainer","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1343c8cf.chunk.js","sourcesContent":["export enum ForgetState {\n    ForgetPassword,\n    EmailSent\n}\n","import * as React from \"react\";\n\nexport interface HeaderProps {\n    children: any\n}\n\nexport const Header: React.ComponentType<HeaderProps> = ({children}) => {\n    return <header>{children}</header>\n}\n","/**\n * Описание типа данных для пути\n */\nexport interface Route {\n    //Название пути\n    title: string;\n    //Путь в клиенском приложении\n    path: string\n}\n\nexport interface Routes {\n    [key: string]: Route & {\n        routes?: Routes;\n    }\n}\n\nexport const routes: Routes = {\n    auth: {\n        title: 'Авторизаия',\n        path: '/'\n    },\n    reg: {\n        title: 'Регистрация',\n        path: '/reg',\n        routes: {\n            confirmed: {\n                title: 'Подтвердите ваш e-mail',\n                path: '/email-confirmed'\n            }\n        }\n    },\n    forget: {\n        title: 'Восстановление пароля',\n        path: '/forget-pass'\n    }\n}\n","export default __webpack_public_path__ + \"static/media/logo.fb080818.svg\";","import {User} from \"src/types/models\";\n\nexport const anonymous: User = {\n    isUser: false\n}\n","import {VisibleContent} from 'src/types/models'\n\nexport const emptyVisible:VisibleContent = {\n    visible: true\n};\n","import {User, VisibleContent} from 'src/types/models'\nimport {StateManagement, ContentManagement} from \"src/domain/managers/interfaces/state-management\";\nimport {anonymous} from \"src/constants/security\";\nimport {emptyVisible} from \"src/constants/empty\";\n\nexport class ApplicationManager {\n    constructor(\n        private stateManager: StateManagement,\n        private stateContent: ContentManagement\n    ) {}\n\n    initialize(): void {\n        try {\n            this.stateManager.securityStore.setUser(anonymous);\n            this.stateContent.contentStore.setVisibleHeader(emptyVisible);\n        } catch (error) {\n            //Ошибка\n        }\n    }\n\n    get user(): User {\n        return this.stateManager.securityStore.user;\n    }\n\n    set user(user: User) {\n        this.stateManager.securityStore.setUser(user);\n    }\n\n    get visibleHeader(): VisibleContent {\n        return this.stateContent.contentStore.visibleHeader;\n    }\n\n    set visibleHeader(visibleContent: VisibleContent) {\n        this.stateContent.contentStore.setVisibleHeader(visibleContent);\n    }\n\n\n}\n","import {action, makeObservable, observable} from \"mobx\";\nimport {User} from \"src/types/models\";\nimport {anonymous} from 'src/constants/security'\n\nexport class SecurityStore {\n    @observable\n    user: User = anonymous;\n\n    @observable\n    error: string = '';\n\n    constructor() {\n        makeObservable(this)\n    }\n\n    @action\n    setUser(user: User) {\n        this.user = user\n    }\n\n    @action\n    setError(error: string) {\n        this.error = error;\n    }\n\n    @action\n    unauthorize() {\n        this.user = anonymous;\n    }\n}\n","import {action, makeObservable, observable} from \"mobx\";\nimport {VisibleContent} from \"src/types/models\";\nimport {emptyVisible} from \"src/constants/empty\";\n\nexport class ContentStore {\n\n    @observable\n    visibleHeader: VisibleContent = emptyVisible;\n\n    constructor() {\n        makeObservable(this);\n    }\n\n    @action\n    setVisibleHeader(visible: VisibleContent) {\n        this.visibleHeader = visible;\n    }\n}\n","import React from \"react\";\nimport {ApplicationManager, MobxManager, ContentManager} from 'src/domain'\nimport {SecurityStore, ContentStore} from 'src/stores'\n\nexport interface ApplicationContextProps {\n    applicationManager: ApplicationManager;\n}\n\nconst applicationManager = new ApplicationManager(\n    new MobxManager(new SecurityStore()),\n    new ContentManager(new ContentStore())\n);\n\n\nexport const ApplicationContext = React.createContext<ApplicationContextProps>({applicationManager})\n","import {SecurityStore, ContentStore} from \"src/stores\";\nimport {StateManagement, ContentManagement} from 'src/domain/managers/interfaces/state-management'\n\nexport class MobxManager implements StateManagement {\n    constructor(public securityStore: SecurityStore) {}\n}\n\nexport class ContentManager implements ContentManagement {\n    constructor(public contentStore: ContentStore) {}\n}\n\n","import {useContext} from \"react\";\nimport {ApplicationContext, ApplicationContextProps} from \"src/context/application-context\";\n\nexport const useApplicationManager = () => {\n    const {applicationManager} = useContext<ApplicationContextProps>(ApplicationContext);\n    return applicationManager;\n}\n","import * as React from \"react\";\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\nimport {routes} from \"src/constants/routes\";\nimport logo from \"src/assets/img/logo.svg\"\nimport {useApplicationManager} from 'src/hooks/manager/useApplicationManager'\nimport {observer} from \"mobx-react\";\nimport {anonymous} from \"src/constants/security\";\nimport {useEffect} from \"react\";\n\nexport const HeaderMenu = observer(() => {\n    const applicationManager = useApplicationManager()\n    const {visibleHeader} = applicationManager;\n    const history = useHistory();\n    const location = useLocation();\n    const {user} = applicationManager;\n\n    function effectPage() {\n        if (location.pathname === routes.forget.path) {\n            visibleHeader.visible = false;\n        } else {\n            visibleHeader.visible = true;\n        }\n    }\n\n    useEffect(effectPage, [location])\n\n    const onLogOff = () => {\n        try {\n            applicationManager.user = anonymous;\n            history.push(routes.auth.path);\n\n        } catch (error) {\n            //error\n        }\n    }\n    const content = (!user.isUser ?\n        <>\n            <span>У вас нет аккаунта?</span>\n            <Link to={routes.reg.path} className=\"btn btn-blue\">Регистрация</Link>\n        </>\n        :\n        <button onClick={onLogOff} className=\"link link-grey\">Выйти</button>);\n\n    return (\n        <>\n            <div className=\"header-menu__left-content\">\n                <Link to={routes.auth.path}>\n                    <img src={logo} alt=\"Logo\" />\n                </Link>\n            </div>\n            <div className=\"header-menu__right-content\">\n                {visibleHeader.visible && content}\n            </div>\n        </>\n    )\n})\n","import * as React from \"react\";\n\nexport interface ButtonSocialProps {\n    icon: string;\n    text: string;\n}\n\nexport const ButtonSocial: React.ComponentType<ButtonSocialProps> = ({icon, text}) => {\n    return (\n        <button className=\"btn btn-icon\">\n            <i className={`icon__${icon}`}/>\n            <span>{text}</span>\n        </button>\n    )\n}\n","import React, {useEffect, useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {observer} from \"mobx-react\";\nimport {ButtonSocial} from \"src/components/UI/ButtonSocial\";\nimport {routes} from \"src/constants/routes\";\n\nexport const Auth = observer(() => {\n    const history = useHistory();\n    const [state, setState] = useState({\n            email: '',\n            password: ''\n        }\n    )\n    const [error, setError] = useState('');\n\n    const handleSubmit = () => {\n        setError('');\n        if (state.email === '' || state.password === '') {\n            return setError((!state.email ? 'Введите email, ' : '') + (!state.password ? 'Введите пароль' : ''));\n        }\n        if (state.email !== 'example@example.com' || state.password !== 'password2021') {\n            return setError('Неверный еmail или пароль');\n        }\n    }\n\n    useEffect(() => setError(''), [state]);\n\n    return (\n        <div className=\"auth-container\">\n            <h1>Войти</h1>\n            <h2>Добро пожаловать, рады видеть вас снова 👋</h2>\n            <div className=\"auth-container__social-group\">\n                <ButtonSocial icon=\"facebook\" text=\"Войти через Facebook\" />\n                <ButtonSocial icon=\"google\" text=\"Войти через Google\" />\n            </div>\n            <h2>или</h2>\n            <div className=\"auth-container__input-group\">\n                <input className={error ? 'danger' : ''} type=\"email\" value={state.email} name=\"email\"\n                       placeholder=\"Email\"\n                       onChange={(e) => setState({...state, email: e.currentTarget.value})} />\n                <input className={error ? 'danger' : ''} type=\"password\" value={state.password} name=\"password\"\n                       placeholder=\"Пароль\"\n                       onChange={(e) => setState({...state, password: e.currentTarget.value})} />\n                <div className=\"text-danger\">{error}</div>\n            </div>\n            <div className=\"auth-container__submit-group\">\n                <button onClick={\n                    handleSubmit} className=\"btn btn-blue\">Войти в аккаунт\n                </button>\n                <button onClick={() => history.push(routes.forget.path)}\n                        className=\"link\"> Забыли пароль?\n                </button>\n            </div>\n        </div>\n    )\n})\n","import * as React from \"react\";\nimport {observer} from \"mobx-react\";\nimport {useEffect, useState} from \"react\";\n\nexport interface ForgetPassProps {\n    onControl: () => void;\n}\n\nexport const ForgetPass: React.ComponentType<ForgetPassProps> = observer(({onControl}) => {\n    const [state, setState] = useState({\n        email: ''\n    });\n    const [error, setError] = useState('');\n\n    const handleSubmit = () => {\n        setError('');\n        let pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n        if (!pattern.test(state.email)) {\n            return setError('Возможно вы ошиблись в указании почтового сервиса')\n        }\n        if (state.email !== 'example@example.com') {\n            return setError('Неверная почта')\n        }\n        onControl();\n    }\n\n    useEffect(() => setError(''), [state]);\n\n    return (\n        <>\n            <h1>Восстановить пароль</h1>\n            <h2>Введите e-mail, на который регистрировались ранее</h2>\n            <div className=\"forget-container__input-group\">\n                <input className={error ? 'danger' : ''} type=\"email\" value={state.email} name=\"email\"\n                       placeholder=\"Email\"\n                       onChange={(e) => setState({...state, email: e.currentTarget.value})} />\n                <div className=\"text-danger\">{error}</div>\n            </div>\n            <div className=\"forget-container__submit-group\">\n                <button onClick={handleSubmit} className=\"btn btn-blue\">Отправить</button>\n                <button className=\"link link-grey\">Отменить</button>\n            </div>\n        </>\n    )\n})\n","export enum ConfirmedState {\n    EmailConfirmed,\n    RepeatedConfirmed\n}\n","import React from \"react\";\nimport {observer} from \"mobx-react\";\nimport {routes} from \"src/constants/routes\";\n\nexport interface EmailSentProps {\n    onSubmit: () => void\n}\n\nexport const EmailSent:React.ComponentType<EmailSentProps> = observer(({onSubmit}) => {\n    return (\n        <>\n            <h1>Письмо отправлено</h1>\n            <h2>На указанный вами e-mail было отправлено письмо для смены пароля</h2>\n            <div className=\"forget-container__submit-group\">\n                <button onClick={onSubmit} className=\"btn btn-blue\">Вернуться на главную\n                </button>\n            </div>\n        </>\n    )\n})\n","import * as React from \"react\";\nimport {observer} from \"mobx-react\";\nimport {useEffect, useState} from \"react\";\nimport {ForgetState} from \"src/components/pages/ForgetPassword/components/types\";\nimport {ForgetPass} from 'src/components/pages/ForgetPassword/components/ForgetPassword'\nimport {EmailSent} from 'src/components/pages/ForgetPassword/components/EmailSent'\nimport {useApplicationManager} from \"src/hooks/manager/useApplicationManager\";\nimport {routes} from \"src/constants/routes\";\nimport {useHistory} from \"react-router-dom\";\n\n\nexport const ForgetSend = observer(() => {\n    const [component, setComponent] = useState<ForgetState>(ForgetState.ForgetPassword);\n    const [icon, setIcon] = useState('icon__key')\n    const history = useHistory();\n\n    const onEmailSent = () => {\n        setComponent(ForgetState.EmailSent);\n        setIcon('icon__send');\n    }\n\n    const onReturn = () => {\n        history.push(routes.auth.path)\n    }\n\n    return (\n        <div className=\"forget-container\">\n            <i className={icon} />\n            {component === ForgetState.ForgetPassword && <ForgetPass onControl={onEmailSent} />}\n            {component === ForgetState.EmailSent && <EmailSent onSubmit={onReturn}/>}\n\n        </div>\n    )\n})\n","import {User} from \"src/types/models\";\n\nexport const online: User = {\n    isUser: true\n}\n","import React, {useEffect, useState} from \"react\";\nimport {useHistory} from 'react-router-dom'\nimport {observer} from \"mobx-react\";\nimport {ButtonSocial} from \"src/components/UI/ButtonSocial\";\nimport {routes} from \"src/constants/routes\";\nimport {useApplicationManager} from 'src/hooks/manager/useApplicationManager'\nimport {online} from \"src/constants/test\";\n\n\nexport const Registration = observer(() => {\n    const applicationManager = useApplicationManager()\n\n    const history = useHistory();\n    const [state, setState] = useState({\n            name: '',\n            email: '',\n            password: ''\n        }\n    )\n    const [error, setError] = useState('');\n    const [visible, setVisible] = useState(false);\n\n    const onLogOn = () => {\n        try {\n            applicationManager.user = online;\n        } catch (error) {\n            //error\n        }\n    }\n\n    const handleSubmit = async () => {\n        setError('');\n        let pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n        if (!pattern.test(state.email)) {\n            return setError('Возможно вы ошиблись в указании почтового сервиса')\n        }\n        await onLogOn();\n        history.push(routes.reg.routes!.confirmed.path);\n    }\n\n    useEffect(() => setError(''), [state]);\n\n    return (\n        <div className=\"reg-container\">\n            <h1>Регистрация</h1>\n            <h2>Зарегистрируйся и получи доступ к аналитике аккаунтов.</h2>\n            <div className=\"auth-container__social-group\">\n                <ButtonSocial icon=\"facebook\" text=\"Войти через Facebook\" />\n                <ButtonSocial icon=\"google\" text=\"Войти через Google\" />\n            </div>\n            <h2>или</h2>\n            <div className=\"reg-container__input-group\">\n                <input type=\"text\" value={state.name} name=\"name\"\n                       placeholder=\"Имя\"\n                       onChange={(e) => setState({...state, name: e.currentTarget.value})} />\n                <input className={error ? 'danger' : ''} type=\"email\" value={state.email} name=\"email\"\n                       placeholder=\"Email\"\n                       onChange={(e) => setState({...state, email: e.currentTarget.value})} />\n                <div className=\"text-danger\">{error}</div>\n                <input type=\"password\" value={state.password} name=\"password\"\n                       placeholder=\"Пароль\"\n                       onChange={(e) => setState({...state, password: e.currentTarget.value})} />\n                <button className=\"link\" hidden={visible} onClick={() => setVisible(true)}>У меня есть промокод</button>\n                {visible ? <input placeholder=\"Промокод\"\n                                  name=\"promoCode\" /> : null}\n            </div>\n            <div className=\"reg-container__submit-group\">\n                <button onClick={handleSubmit} className=\"btn btn-blue\">Создать аккаунт</button>\n                <span>Создавая аккаунт, я согласен с <button\n                    className=\"link\">условиями оферты</button></span>\n            </div>\n        </div>\n    )\n})\n","import React from \"react\";\nimport {observer} from \"mobx-react\";\n\nexport interface ConfirmedProps {\n    onControl: () => void\n}\n\nexport const Confirmed: React.ComponentType<ConfirmedProps> = observer(({onControl}) => {\n    return (\n        <div className=\"confirmed-container email-confirmed\">\n            <h1>Подтвердите ваш e-mail</h1>\n            <h2>Игорь, на ваш E-mail отправлено письмо со ссылкой для\n                подтверждения. Перейдите по ней, чтобы активировать вашу учетную\n                запись и получить 7 дней бесплатного доступа. </h2>\n            <div className=\"confirmed-container__submit-group\">\n                <button className=\"btn btn-blue\">Перейти к почте</button>\n                <button onClick={onControl}\n                        className=\"link\"> Мне не пришло письмо\n                </button>\n            </div>\n        </div>\n    )\n})\n","import React, {useEffect, useState} from \"react\";\nimport {observer} from \"mobx-react\";\n\nexport interface RepeatedEmailConfirmedProps {\n    onControl: () => void;\n}\n\nexport const RepeatedEmailConfirmed: React.ComponentType<RepeatedEmailConfirmedProps> = observer(({onControl}) => {\n    const [state, setState] = useState({\n        email: ''\n    });\n    const [error, setError] = useState('');\n    const handleSubmit = () => {\n        setError('');\n        let pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n        if (!pattern.test(state.email)) {\n            return setError('Возможно вы ошиблись в указании почтового сервиса')\n        }\n        onControl();\n    }\n\n    useEffect(() => setError(''), [state]);\n\n    return (\n        <div className=\"confirmed-container repeated-email\">\n            <h1>Мне не пришло письмо</h1>\n            <h2>Письмо может прийти с задержкой в 5-10 минут. <br />\n                Также проверьте разные папки почтового ящика (актуально для gmail.com) и папку <br />\n                \"Спам\".Если письмо все же не пришло, повторите попытку или напишите об этом в <br />\n                тех.поддержку <a href=\"mailto:support@livedune.ru\"\n                                 className=\"link\">support@livedune.ru</a> и мы активируем ваш аккаунт. </h2>\n            <div className=\"confirmed-container__input-group\">\n                <input className={error ? 'danger' : ''} type=\"email\" value={state.email} name=\"email\"\n                       placeholder=\"Email\"\n                       onChange={(e) => setState({...state, email: e.currentTarget.value})} />\n                <div className=\"text-danger\">{error}</div>\n            </div>\n            <div className=\"confirmed-container__submit-group\">\n                <button onClick={handleSubmit} className=\"btn btn-blue\">Отправить заново</button>\n                <button className=\"link link-grey\">Отменить</button>\n            </div>\n        </div>\n    )\n})\n","import React, {useEffect, useState} from \"react\";\nimport {observer} from \"mobx-react\";\nimport {Confirmed} from 'src/components/pages/Registration/components/EmailConfirmed';\nimport {RepeatedEmailConfirmed} from 'src/components/pages/Registration/components/RepeatedConfirmed';\nimport {ConfirmedState} from 'src/components/pages/Registration/components/types';\nimport {useApplicationManager} from \"src/hooks/manager/useApplicationManager\";\nimport {routes} from \"../../../../constants/routes\";\nimport {useHistory} from \"react-router-dom\";\n\n\nexport const EmailConfirmed = observer(() => {\n    const applicationManager = useApplicationManager()\n    const history = useHistory();\n    const {user} = applicationManager;\n    const [component, setComponent] = useState<ConfirmedState>(ConfirmedState.EmailConfirmed);\n\n    function effectInitial() {\n        if (user.isUser === false) {\n            history.push(routes.auth.path);\n        }\n    }\n\n    const onEmailConfirmed = () => {\n        setComponent(ConfirmedState.EmailConfirmed)\n    }\n\n    const onRepeatedEmailConfirmed = () => {\n        setComponent(ConfirmedState.RepeatedConfirmed)\n    }\n\n    useEffect(effectInitial, []);\n\n    return (\n        <>\n            {component === ConfirmedState.EmailConfirmed && <Confirmed onControl={onRepeatedEmailConfirmed} />}\n            {component === ConfirmedState.RepeatedConfirmed && <RepeatedEmailConfirmed onControl={onEmailConfirmed} />}\n        </>\n    );\n})\n","import * as React from \"react\";\nimport {observer} from \"mobx-react\";\nimport {Header, HeaderMenu} from \"src/components\";\nimport {Route, Switch} from \"react-router-dom\";\nimport {routes} from \"src/constants/routes\";\nimport {Auth, Registration, ForgetSend, EmailConfirmed} from \"src/components/pages\";\n\nexport const MainContainer = observer(() => {\n\n    let content: React.ReactNode = '';\n    content = (\n        <Switch>\n            <Route path={routes.auth.path} component={Auth} exact/>\n            <Route path={routes.reg.path} component={Registration} />\n            <Route path={routes.reg.routes!.confirmed.path} component={EmailConfirmed} />\n            <Route path={routes.forget.path} component={ForgetSend} />\n        </Switch>\n    )\n    return (\n        <>\n            <Header>\n                <HeaderMenu />\n            </Header>\n            {content}\n        </>\n    )\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {MainContainer} from 'src/containers/';\n\nimport 'primeicons/primeicons.css'\nimport 'src/assets/styles/common.scss'\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <MainContainer />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}